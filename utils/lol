/* eslint-disable */

import axios from 'axios';
import { pick } from 'lodash';

const { socketScheme, scheme, hostname } =
  process.env.NODE_ENV === 'production'
  ? { socketScheme: 'wss', scheme: 'https', hostname: window.location.hostname }
  : { socketScheme: 'ws', scheme: 'http', hostname: 'localhost:5000' }

export const apiURL = `${scheme}://${hostname}/api`
export const socketURL = `${socketScheme}://${hostname}/socket`

function buildHeaders () {
  const defaultHeaders = {
    'Accept': 'application/json',
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${getAuthToken()}`
  }

  console.log(`defaultHeaders ::: ${defaultHeaders}`)

  return new Headers({
    ...defaultHeaders
  })
}

export function getAuthToken () {
  return JSON.parse(localStorage.getItem('token'))
}

export function removeAuthToken () {
  localStorage.removeItem('token')
}

export async function base(params) {
  try {
    const { status, data } = await axios.create({
      baseURL: apiUrl,
      ...params,
    });
    if (status >= 200 && status < 300) {
      return { data };
    }
    return { err: data };
  } catch (e) {
    return {
      err: pick(e.response, ['data', 'status', 'statusText']),
    };
  }
}

export function httpGet (url) {
  return base({
    url,
    headers: buildHeaders(),
    withCredentials: false
  });
}

export function httpPost (url, data) {
  return base({
    url,
    headers: buildHeaders(),
    withCredentials: false,
    method: 'POST',
    data: JSON.stringify(data)
  });
}

export function httpDelete(url, data) {
  return base({
    url,
    headers: buildHeaders(),
    withCredentials: false,
    method: 'put',
    data: JSON.stringify(data),
  });
}

export function httpPut(url, data) {
  return base({
    url,
    headers: buildHeaders(),
    withCredentials: false,
    method: 'put',
    data: JSON.stringify(data),
  });
}
