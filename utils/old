/* eslint-disable */

import axios from 'axios';
import { pick } from 'lodash';

const { socketScheme, scheme, hostname } =
  process.env.NODE_ENV === 'production'
  ? { socketScheme: 'wss', scheme: 'https', hostname: window.location.hostname }
  : { socketScheme: 'ws', scheme: 'http', hostname: 'localhost:5000' }

function buildHeaders () {
  const defaultHeaders = {
    'Accept': 'application/json',
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${getAuthToken()}`
  }

  return new Headers({
    ...defaultHeaders
  })
}

function checkStatus (response) {
  if (response.status == 200) {
    return response
  } else {
    var error = new Error(response.statusText)
    // error.response = response
    throw error
  }
}

export function getAuthToken () {
  return JSON.parse(localStorage.getItem('token'))
}

export function removeAuthToken () {
  localStorage.removeItem('token')
}

export const apiURL = `${scheme}://${hostname}/api`
export const socketURL = `${socketScheme}://${hostname}/socket`

export async function httpGet (url) {
  const response = await fetch(url, {
    headers: buildHeaders()
  })
  return checkStatus(response).json()
}

export async function httpPost (url, data) {
  const body = JSON.stringify(data)
  const response = await fetch(url, {
    method: 'POST',
    headers: buildHeaders(),
    body: body
  })
  return checkStatus(response).json()
}

export async function httpDelete (url) {
  const response = await fetch(url, {
    method: 'DELETE',
    headers: buildHeaders()
  })
  return checkStatus(response).json()
}

export async function httpUpdate (url, data) {
  const body = JSON.stringify(data)
  const response = await fetch(url, {
    method: 'PUT',
    headers: buildHeaders(),
    body: body
  })
  return checkStatus(response).json()
}
